import { EventEmitter, inject, Injectable } from '@angular/core';
import { Clock, Vector4, WebGLRenderer } from 'three';
import { HOST_ELEMENT } from './ThView';
import { isObserved } from './util';
import { Subject, takeUntil } from 'rxjs';
import { RENDERER_PROVIDERS } from './renderer/renderer-providers';
import * as i0 from "@angular/core";
export class ThEngineService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.hostElement = inject(HOST_ELEMENT);
        this.clock = new Clock();
        this.destroyed$ = new Subject();
        this.resizeEmitter = new EventEmitter();
        this.beforeRenderEmitter = new EventEmitter();
        this.views = [];
        this.beforeRender$ = this.beforeRenderEmitter.pipe(takeUntil(this.destroyed$));
        this.resize$ = this.resizeEmitter.pipe(takeUntil(this.destroyed$));
        const args = this.initRenderer();
        this.renderers = args.renderers;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.canvas = args.canvas;
        this.wegblRenderer = args.mainRenderer;
        this.initResizeObserver();
    }
    ngOnDestroy() {
        if (this.resizeObserver && this.hostElement) {
            this.resizeObserver.unobserve(this.hostElement.nativeElement);
        }
    }
    initResizeObserver() {
        // We have to run this outside angular zones,
        // because it could trigger heavy changeDetection cycles.
        this.ngZone.runOutsideAngular(() => {
            this.initCanvasSize();
            if (!this.resizeObserver) {
                this.resizeObserver = new ResizeObserver(() => {
                    this.resize();
                });
            }
            this.resizeObserver.observe(this.hostElement.nativeElement);
        });
    }
    initCanvasSize() {
        this.canvas?.style.setProperty('width', '100%');
        this.canvas?.style.setProperty('height', '100%');
    }
    initRenderer() {
        const renderers = inject(RENDERER_PROVIDERS);
        let canvas;
        let mainRenderer;
        for (const renderer of renderers) {
            if (renderer.domElement instanceof HTMLCanvasElement) {
                mainRenderer = renderer;
                canvas = mainRenderer.domElement;
            }
        }
        if (!renderers || renderers.length < 1) {
            throw new Error('missing Canvas Renderer');
        }
        return {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            canvas,
            mainRenderer,
            renderers,
        };
    }
    setViews(views) {
        this.views = views;
    }
    addView(view) {
        this.views.push(view);
        const canvasDimensions = this.calcRendererSize();
        if (canvasDimensions) {
            this.adjustViewDimensions(view, canvasDimensions.width, canvasDimensions.height);
        }
    }
    render() {
        this.beforeRenderEmitter.emit({ engine: this, delta: this.clock.getDelta() });
        for (const view of this.views) {
            this.renderView(view);
        }
    }
    renderView(view) {
        const camera = view.camera;
        const scene = view.scene;
        if (!camera || !scene || !camera.objRef || !scene.objRef) {
            return;
        }
        if (isObserved(view.onRender)) {
            this.ngZone.run(() => view.onRender.emit({
                renderer: this.renderers,
                scene,
                camera,
            }));
        }
        for (const renderer of this.renderers) {
            if (view.effectComposer && !(renderer instanceof WebGLRenderer)) {
                // effect composer needs a webgl renderer
                continue;
            }
            this.applyRendererParametersFromView(view, renderer);
            if (isObserved(view.onCurrentRendererPass)) {
                this.ngZone.run(() => view.onCurrentRendererPass.emit({ renderer, scene, camera, engine: this }));
            }
            if (view.effectComposer) {
                view.effectComposer.render();
                return;
            }
            else {
                renderer.render(scene.objRef, camera.objRef);
            }
        }
    }
    applyRendererParametersFromView(view, renderer) {
        if (view.viewPort && renderer.setViewport) {
            if (view.viewPort instanceof Vector4) {
                renderer.setViewport(view.viewPort);
            }
            else {
                renderer.setViewport(view.viewPort.x, view.viewPort.y, view.viewPort.width, view.viewPort.height);
            }
        }
        if (view.scissor && renderer.setScissor) {
            if (view.scissor instanceof Vector4) {
                renderer.setScissor(view.scissor);
            }
            else {
                renderer.setScissor(view.scissor.x, view.scissor.y, view.scissor.width, view.scissor.height);
            }
        }
        if (view.scissorTest !== undefined && renderer.setScissorTest) {
            renderer.setScissorTest(view.scissorTest);
        }
        if (view.clearColor && renderer.setClearColor) {
            renderer.setClearColor(view.clearColor);
        }
        if (view.clearAlpha !== undefined && renderer.setClearAlpha) {
            renderer.setClearAlpha(view.clearAlpha);
        }
        if (view.shadow !== undefined && renderer.shadowMap) {
            renderer.shadowMap.enabled = true;
        }
    }
    resize() {
        const { width, height } = this.calcRendererSize();
        // this.wegblRenderer?.setSize(width, height, false);
        this.renderers?.forEach((renderer) => renderer.setSize(width, height, false));
        for (const view of this.views) {
            this.adjustViewDimensions(view, width, height);
        }
        this.resizeEmitter.emit({ width, height });
        return true;
    }
    calcRendererSize() {
        // const pixelRatio = window.devicePixelRatio;
        return {
            width: this.hostElement.nativeElement.clientWidth ?? 0 /* * pixelRatio */,
            height: this.hostElement.nativeElement.clientHeight ?? 0 /* * pixelRatio */,
        };
    }
    adjustViewDimensions(view, width, height) {
        if (!view.viewPort) {
            if (view.camera && view.camera.objRef.aspect) {
                view.camera.objRef.aspect = width / height;
                view.camera.objRef.updateProjectionMatrix();
            }
            view.effectComposer?.setSize(width, height);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: ThEngineService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: ThEngineService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: ThEngineService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i0.NgZone }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhFbmdpbmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL1RoRW5naW5lLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUVwRixPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDdEQsT0FBTyxFQUFFLFlBQVksRUFBVSxNQUFNLFVBQVUsQ0FBQztBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBYyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQVFuRSxNQUFNLE9BQU8sZUFBZTtJQXFCMUIsWUFBMkIsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFqQnhCLGdCQUFXLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBUzVDLFVBQUssR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3BCLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBQ3hCLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNuQyx3QkFBbUIsR0FBRyxJQUFJLFlBQVksRUFBZSxDQUFDO1FBQy9ELFVBQUssR0FBYSxFQUFFLENBQUM7UUFLM0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJ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LCBpbmplY3QsIEluamVjdGFibGUsIE5nWm9uZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBDbG9jaywgVmVjdG9yNCwgV2ViR0xSZW5kZXJlciB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IEhPU1RfRUxFTUVOVCwgVGhWaWV3IH0gZnJvbSAnLi9UaFZpZXcnO1xuaW1wb3J0IHsgaXNPYnNlcnZlZCB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCB0YWtlVW50aWwgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFJFTkRFUkVSX1BST1ZJREVSUyB9IGZyb20gJy4vcmVuZGVyZXIvcmVuZGVyZXItcHJvdmlkZXJzJztcblxuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJTdGF0ZSB7XG4gIGVuZ2luZTogVGhFbmdpbmVTZXJ2aWNlO1xuICBkZWx0YTogbnVtYmVyO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhFbmdpbmVTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHVibGljIHJlYWRvbmx5IGJlZm9yZVJlbmRlciQ6IE9ic2VydmFibGU8UmVuZGVyU3RhdGU+O1xuICBwdWJsaWMgcmVhZG9ubHkgcmVzaXplJDogT2JzZXJ2YWJsZTx7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0+O1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgaG9zdEVsZW1lbnQgPSBpbmplY3QoSE9TVF9FTEVNRU5UKTtcbiAgcHVibGljIHJlYWRvbmx5IGNhbnZhcz86IEhUTUxDYW52YXNFbGVtZW50O1xuICBwdWJsaWMgcmVhZG9ubHkgd2VnYmxSZW5kZXJlcj86IFRIUkVFLldlYkdMUmVuZGVyZXI7XG5cbiAgLyoqXG4gICAqIGFsbCBpbmplY3RlZCByZW5kZXJlcnNcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSByZW5kZXJlcnM6IFRIUkVFLlJlbmRlcmVyW107XG5cbiAgcHJpdmF0ZSBjbG9jayA9IG5ldyBDbG9jaygpO1xuICBwcml2YXRlIGRlc3Ryb3llZCQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBwcml2YXRlIHJlYWRvbmx5IHJlc2l6ZUVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgYmVmb3JlUmVuZGVyRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8UmVuZGVyU3RhdGU+KCk7XG4gIHByaXZhdGUgdmlld3M6IFRoVmlld1tdID0gW107XG5cbiAgcHJpdmF0ZSByZXNpemVPYnNlcnZlcj86IFJlc2l6ZU9ic2VydmVyO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lKSB7XG4gICAgdGhpcy5iZWZvcmVSZW5kZXIkID0gdGhpcy5iZWZvcmVSZW5kZXJFbWl0dGVyLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveWVkJCkpO1xuICAgIHRoaXMucmVzaXplJCA9IHRoaXMucmVzaXplRW1pdHRlci5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCQpKTtcblxuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLmluaXRSZW5kZXJlcigpO1xuICAgIHRoaXMucmVuZGVyZXJzID0gYXJncy5yZW5kZXJlcnM7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICB0aGlzLmNhbnZhcyA9IGFyZ3MuY2FudmFzO1xuICAgIHRoaXMud2VnYmxSZW5kZXJlciA9IGFyZ3MubWFpblJlbmRlcmVyIGFzIFdlYkdMUmVuZGVyZXI7XG5cbiAgICB0aGlzLmluaXRSZXNpemVPYnNlcnZlcigpO1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnJlc2l6ZU9ic2VydmVyICYmIHRoaXMuaG9zdEVsZW1lbnQpIHtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIudW5vYnNlcnZlKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0UmVzaXplT2JzZXJ2ZXIoKSB7XG4gICAgLy8gV2UgaGF2ZSB0byBydW4gdGhpcyBvdXRzaWRlIGFuZ3VsYXIgem9uZXMsXG4gICAgLy8gYmVjYXVzZSBpdCBjb3VsZCB0cmlnZ2VyIGhlYXZ5IGNoYW5nZURldGVjdGlvbiBjeWNsZXMuXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5pbml0Q2FudmFzU2l6ZSgpO1xuICAgICAgaWYgKCF0aGlzLnJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKCkgPT4ge1xuICAgICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGluaXRDYW52YXNTaXplKCkge1xuICAgIHRoaXMuY2FudmFzPy5zdHlsZS5zZXRQcm9wZXJ0eSgnd2lkdGgnLCAnMTAwJScpO1xuICAgIHRoaXMuY2FudmFzPy5zdHlsZS5zZXRQcm9wZXJ0eSgnaGVpZ2h0JywgJzEwMCUnKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdFJlbmRlcmVyKCkge1xuICAgIGNvbnN0IHJlbmRlcmVycyA9IGluamVjdDxUSFJFRS5SZW5kZXJlcltdPihSRU5ERVJFUl9QUk9WSURFUlMpO1xuICAgIGxldCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50IHwgdW5kZWZpbmVkO1xuICAgIGxldCBtYWluUmVuZGVyZXI6IFRIUkVFLlJlbmRlcmVyIHwgdW5kZWZpbmVkO1xuICAgIGZvciAoY29uc3QgcmVuZGVyZXIgb2YgcmVuZGVyZXJzKSB7XG4gICAgICBpZiAocmVuZGVyZXIuZG9tRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICAgIG1haW5SZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICBjYW52YXMgPSBtYWluUmVuZGVyZXIuZG9tRWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXJlbmRlcmVycyB8fCByZW5kZXJlcnMubGVuZ3RoIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIENhbnZhcyBSZW5kZXJlcicpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgY2FudmFzLFxuICAgICAgbWFpblJlbmRlcmVyLFxuICAgICAgcmVuZGVyZXJzLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgc2V0Vmlld3Modmlld3M6IFRoVmlld1tdKSB7XG4gICAgdGhpcy52aWV3cyA9IHZpZXdzO1xuICB9XG5cbiAgcHVibGljIGFkZFZpZXcodmlldzogVGhWaWV3KSB7XG4gICAgdGhpcy52aWV3cy5wdXNoKHZpZXcpO1xuICAgIGNvbnN0IGNhbnZhc0RpbWVuc2lvbnMgPSB0aGlzLmNhbGNSZW5kZXJlclNpemUoKTtcbiAgICBpZiAoY2FudmFzRGltZW5zaW9ucykge1xuICAgICAgdGhpcy5hZGp1c3RWaWV3RGltZW5zaW9ucyh2aWV3LCBjYW52YXNEaW1lbnNpb25zLndpZHRoLCBjYW52YXNEaW1lbnNpb25zLmhlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbmRlcigpOiB2b2lkIHtcbiAgICB0aGlzLmJlZm9yZVJlbmRlckVtaXR0ZXIuZW1pdCh7IGVuZ2luZTogdGhpcywgZGVsdGE6IHRoaXMuY2xvY2suZ2V0RGVsdGEoKSB9KTtcbiAgICBmb3IgKGNvbnN0IHZpZXcgb2YgdGhpcy52aWV3cykge1xuICAgICAgdGhpcy5yZW5kZXJWaWV3KHZpZXcpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCByZW5kZXJWaWV3KHZpZXc6IFRoVmlldykge1xuICAgIGNvbnN0IGNhbWVyYSA9IHZpZXcuY2FtZXJhO1xuICAgIGNvbnN0IHNjZW5lID0gdmlldy5zY2VuZTtcblxuICAgIGlmICghY2FtZXJhIHx8ICFzY2VuZSB8fCAhY2FtZXJhLm9ialJlZiB8fCAhc2NlbmUub2JqUmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzT2JzZXJ2ZWQodmlldy5vblJlbmRlcikpIHtcbiAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PlxuICAgICAgICB2aWV3Lm9uUmVuZGVyLmVtaXQoe1xuICAgICAgICAgIHJlbmRlcmVyOiB0aGlzLnJlbmRlcmVycyxcbiAgICAgICAgICBzY2VuZSxcbiAgICAgICAgICBjYW1lcmEsXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHJlbmRlcmVyIG9mIHRoaXMucmVuZGVyZXJzKSB7XG4gICAgICBpZiAodmlldy5lZmZlY3RDb21wb3NlciAmJiAhKHJlbmRlcmVyIGluc3RhbmNlb2YgV2ViR0xSZW5kZXJlcikpIHtcbiAgICAgICAgLy8gZWZmZWN0IGNvbXBvc2VyIG5lZWRzIGEgd2ViZ2wgcmVuZGVyZXJcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLmFwcGx5UmVuZGVyZXJQYXJhbWV0ZXJzRnJvbVZpZXcodmlldywgcmVuZGVyZXIpO1xuICAgICAgaWYgKGlzT2JzZXJ2ZWQodmlldy5vbkN1cnJlbnRSZW5kZXJlclBhc3MpKSB7XG4gICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB2aWV3Lm9uQ3VycmVudFJlbmRlcmVyUGFzcy5lbWl0KHsgcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGVuZ2luZTogdGhpcyB9KSk7XG4gICAgICB9XG4gICAgICBpZiAodmlldy5lZmZlY3RDb21wb3Nlcikge1xuICAgICAgICB2aWV3LmVmZmVjdENvbXBvc2VyLnJlbmRlcigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUub2JqUmVmLCBjYW1lcmEub2JqUmVmKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYXBwbHlSZW5kZXJlclBhcmFtZXRlcnNGcm9tVmlldyh2aWV3OiBUaFZpZXcsIHJlbmRlcmVyOiBQYXJ0aWFsPFdlYkdMUmVuZGVyZXI+KSB7XG4gICAgaWYgKHZpZXcudmlld1BvcnQgJiYgcmVuZGVyZXIuc2V0Vmlld3BvcnQpIHtcbiAgICAgIGlmICh2aWV3LnZpZXdQb3J0IGluc3RhbmNlb2YgVmVjdG9yNCkge1xuICAgICAgICByZW5kZXJlci5zZXRWaWV3cG9ydCh2aWV3LnZpZXdQb3J0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFZpZXdwb3J0KHZpZXcudmlld1BvcnQueCwgdmlldy52aWV3UG9ydC55LCB2aWV3LnZpZXdQb3J0LndpZHRoLCB2aWV3LnZpZXdQb3J0LmhlaWdodCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZpZXcuc2Npc3NvciAmJiByZW5kZXJlci5zZXRTY2lzc29yKSB7XG4gICAgICBpZiAodmlldy5zY2lzc29yIGluc3RhbmNlb2YgVmVjdG9yNCkge1xuICAgICAgICByZW5kZXJlci5zZXRTY2lzc29yKHZpZXcuc2Npc3Nvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW5kZXJlci5zZXRTY2lzc29yKHZpZXcuc2Npc3Nvci54LCB2aWV3LnNjaXNzb3IueSwgdmlldy5zY2lzc29yLndpZHRoLCB2aWV3LnNjaXNzb3IuaGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmlldy5zY2lzc29yVGVzdCAhPT0gdW5kZWZpbmVkICYmIHJlbmRlcmVyLnNldFNjaXNzb3JUZXN0KSB7XG4gICAgICByZW5kZXJlci5zZXRTY2lzc29yVGVzdCh2aWV3LnNjaXNzb3JUZXN0KTtcbiAgICB9XG5cbiAgICBpZiAodmlldy5jbGVhckNvbG9yICYmIHJlbmRlcmVyLnNldENsZWFyQ29sb3IpIHtcbiAgICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3Iodmlldy5jbGVhckNvbG9yKTtcbiAgICB9XG5cbiAgICBpZiAodmlldy5jbGVhckFscGhhICE9PSB1bmRlZmluZWQgJiYgcmVuZGVyZXIuc2V0Q2xlYXJBbHBoYSkge1xuICAgICAgcmVuZGVyZXIuc2V0Q2xlYXJBbHBoYSh2aWV3LmNsZWFyQWxwaGEpO1xuICAgIH1cblxuICAgIGlmICh2aWV3LnNoYWRvdyAhPT0gdW5kZWZpbmVkICYmIHJlbmRlcmVyLnNoYWRvd01hcCkge1xuICAgICAgcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZXNpemUoKSB7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLmNhbGNSZW5kZXJlclNpemUoKTtcblxuICAgIC8vIHRoaXMud2VnYmxSZW5kZXJlcj8uc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0LCBmYWxzZSk7XG4gICAgdGhpcy5yZW5kZXJlcnM/LmZvckVhY2goKHJlbmRlcmVyKSA9PiByZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQsIGZhbHNlKSk7XG5cbiAgICBmb3IgKGNvbnN0IHZpZXcgb2YgdGhpcy52aWV3cykge1xuICAgICAgdGhpcy5hZGp1c3RWaWV3RGltZW5zaW9ucyh2aWV3LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc2l6ZUVtaXR0ZXIuZW1pdCh7IHdpZHRoLCBoZWlnaHQgfSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjYWxjUmVuZGVyZXJTaXplKCkge1xuICAgIC8vIGNvbnN0IHBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aCA/PyAwIC8qICogcGl4ZWxSYXRpbyAqLyxcbiAgICAgIGhlaWdodDogdGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodCA/PyAwIC8qICogcGl4ZWxSYXRpbyAqLyxcbiAgICB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkanVzdFZpZXdEaW1lbnNpb25zKHZpZXc6IFRoVmlldywgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICBpZiAoIXZpZXcudmlld1BvcnQpIHtcbiAgICAgIGlmICh2aWV3LmNhbWVyYSAmJiAodmlldy5jYW1lcmEub2JqUmVmIGFzIGFueSkuYXNwZWN0KSB7XG4gICAgICAgICh2aWV3LmNhbWVyYS5vYmpSZWYgYXMgYW55KS5hc3BlY3QgPSB3aWR0aCAvIGhlaWdodDtcbiAgICAgICAgKHZpZXcuY2FtZXJhLm9ialJlZiBhcyBhbnkpLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgIH1cblxuICAgICAgdmlldy5lZmZlY3RDb21wb3Nlcj8uc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==