import { Type } from '@angular/core';
import { Camera, MOUSE, TOUCH, Vector3 } from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { ThControlBase } from '../ThControlBase';
import * as i0 from "@angular/core";
export declare class ThOrbitControls<T extends OrbitControls = OrbitControls, TARGS = [object: Camera, domElement: HTMLElement]> extends ThControlBase<T, TARGS> {
    getType(): Type<OrbitControls>;
    set object(value: Camera);
    get object(): Camera | undefined;
    set domElement(value: HTMLElement | Document);
    get domElement(): (HTMLElement | Document) | undefined;
    set enabled(value: boolean);
    get enabled(): boolean | undefined;
    set target(value: Vector3 | [x: number, y: number, z: number]);
    get target(): Vector3 | undefined;
    set center(value: Vector3 | [x: number, y: number, z: number]);
    get center(): Vector3 | undefined;
    set cursor(value: Vector3 | [x: number, y: number, z: number]);
    get cursor(): Vector3 | undefined;
    set minDistance(value: number);
    get minDistance(): number | undefined;
    set maxDistance(value: number);
    get maxDistance(): number | undefined;
    set minZoom(value: number);
    get minZoom(): number | undefined;
    set maxZoom(value: number);
    get maxZoom(): number | undefined;
    set minTargetRadius(value: number);
    get minTargetRadius(): number | undefined;
    set maxTargetRadius(value: number);
    get maxTargetRadius(): number | undefined;
    set minPolarAngle(value: number);
    get minPolarAngle(): number | undefined;
    set maxPolarAngle(value: number);
    get maxPolarAngle(): number | undefined;
    set minAzimuthAngle(value: number);
    get minAzimuthAngle(): number | undefined;
    set maxAzimuthAngle(value: number);
    get maxAzimuthAngle(): number | undefined;
    set enableDamping(value: boolean);
    get enableDamping(): boolean | undefined;
    set dampingFactor(value: number);
    get dampingFactor(): number | undefined;
    set enableZoom(value: boolean);
    get enableZoom(): boolean | undefined;
    set zoomSpeed(value: number);
    get zoomSpeed(): number | undefined;
    set zoomToCursor(value: boolean);
    get zoomToCursor(): boolean | undefined;
    set enableRotate(value: boolean);
    get enableRotate(): boolean | undefined;
    set rotateSpeed(value: number);
    get rotateSpeed(): number | undefined;
    set enablePan(value: boolean);
    get enablePan(): boolean | undefined;
    set panSpeed(value: number);
    get panSpeed(): number | undefined;
    set screenSpacePanning(value: boolean);
    get screenSpacePanning(): boolean | undefined;
    set keyPanSpeed(value: number);
    get keyPanSpeed(): number | undefined;
    set autoRotate(value: boolean);
    get autoRotate(): boolean | undefined;
    set autoRotateSpeed(value: number);
    get autoRotateSpeed(): number | undefined;
    set keys(value: {
        LEFT: string;
        UP: string;
        RIGHT: string;
        BOTTOM: string;
    });
    get keys(): {
        LEFT: string;
        UP: string;
        RIGHT: string;
        BOTTOM: string;
    } | undefined;
    set mouseButtons(value: {
        LEFT?: MOUSE | null | undefined;
        MIDDLE?: MOUSE | null | undefined;
        RIGHT?: MOUSE | null | undefined;
    });
    get mouseButtons(): {
        LEFT?: MOUSE | null | undefined;
        MIDDLE?: MOUSE | null | undefined;
        RIGHT?: MOUSE | null | undefined;
    } | undefined;
    set touches(value: {
        ONE?: TOUCH | null | undefined;
        TWO?: TOUCH | null | undefined;
    });
    get touches(): {
        ONE?: TOUCH | null | undefined;
        TWO?: TOUCH | null | undefined;
    } | undefined;
    set target0(value: Vector3 | [x: number, y: number, z: number]);
    get target0(): Vector3 | undefined;
    set position0(value: Vector3 | [x: number, y: number, z: number]);
    get position0(): Vector3 | undefined;
    set zoom0(value: number);
    get zoom0(): number | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThOrbitControls<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThOrbitControls<any, any>, "th-orbitControls", never, { "object": { "alias": "object"; "required": false; }; "domElement": { "alias": "domElement"; "required": false; }; "enabled": { "alias": "enabled"; "required": false; }; "target": { "alias": "target"; "required": false; }; "center": { "alias": "center"; "required": false; }; "cursor": { "alias": "cursor"; "required": false; }; "minDistance": { "alias": "minDistance"; "required": false; }; "maxDistance": { "alias": "maxDistance"; "required": false; }; "minZoom": { "alias": "minZoom"; "required": false; }; "maxZoom": { "alias": "maxZoom"; "required": false; }; "minTargetRadius": { "alias": "minTargetRadius"; "required": false; }; "maxTargetRadius": { "alias": "maxTargetRadius"; "required": false; }; "minPolarAngle": { "alias": "minPolarAngle"; "required": false; }; "maxPolarAngle": { "alias": "maxPolarAngle"; "required": false; }; "minAzimuthAngle": { "alias": "minAzimuthAngle"; "required": false; }; "maxAzimuthAngle": { "alias": "maxAzimuthAngle"; "required": false; }; "enableDamping": { "alias": "enableDamping"; "required": false; }; "dampingFactor": { "alias": "dampingFactor"; "required": false; }; "enableZoom": { "alias": "enableZoom"; "required": false; }; "zoomSpeed": { "alias": "zoomSpeed"; "required": false; }; "zoomToCursor": { "alias": "zoomToCursor"; "required": false; }; "enableRotate": { "alias": "enableRotate"; "required": false; }; "rotateSpeed": { "alias": "rotateSpeed"; "required": false; }; "enablePan": { "alias": "enablePan"; "required": false; }; "panSpeed": { "alias": "panSpeed"; "required": false; }; "screenSpacePanning": { "alias": "screenSpacePanning"; "required": false; }; "keyPanSpeed": { "alias": "keyPanSpeed"; "required": false; }; "autoRotate": { "alias": "autoRotate"; "required": false; }; "autoRotateSpeed": { "alias": "autoRotateSpeed"; "required": false; }; "keys": { "alias": "keys"; "required": false; }; "mouseButtons": { "alias": "mouseButtons"; "required": false; }; "touches": { "alias": "touches"; "required": false; }; "target0": { "alias": "target0"; "required": false; }; "position0": { "alias": "position0"; "required": false; }; "zoom0": { "alias": "zoom0"; "required": false; }; }, {}, never, ["*"], false, never>;
}
