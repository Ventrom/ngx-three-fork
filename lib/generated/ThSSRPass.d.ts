import { Type } from '@angular/core';
import { Camera, Color, ColorRepresentation, Material, Mesh, MeshBasicMaterial, MeshNormalMaterial, Scene, ShaderMaterial, WebGLRenderTarget, WebGLRenderer } from 'three';
import { ReflectorForSSRPass } from 'three/examples/jsm/objects/ReflectorForSSRPass.js';
import { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';
import { SSRPass, SSRPassParams } from 'three/examples/jsm/postprocessing/SSRPass.js';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThSSRPass<T extends SSRPass = SSRPass, TARGS = SSRPassParams> extends ThPass<T, TARGS> {
    getType(): Type<SSRPass>;
    set width(value: number);
    get width(): number | undefined;
    set height(value: number);
    get height(): number | undefined;
    set clear(value: boolean);
    get clear(): boolean | undefined;
    set renderer(value: WebGLRenderer);
    get renderer(): WebGLRenderer | undefined;
    set scene(value: Scene);
    get scene(): Scene | undefined;
    set camera(value: Camera);
    get camera(): Camera | undefined;
    set groundReflector(value: ReflectorForSSRPass | null);
    get groundReflector(): (ReflectorForSSRPass | null) | undefined;
    set opacity(value: number);
    get opacity(): number | undefined;
    set output(value: number);
    get output(): number | undefined;
    set maxDistance(value: number);
    get maxDistance(): number | undefined;
    set thickness(value: number);
    get thickness(): number | undefined;
    set tempColor(value: Color | [
        ...args: [color: ColorRepresentation] | [r: number, g: number, b: number]
    ]);
    get tempColor(): Color | undefined;
    get selects(): (Mesh[] | null) | undefined;
    set selects(value: Mesh[] | null);
    set selective(value: boolean);
    get selective(): boolean | undefined;
    get bouncing(): boolean | undefined;
    set bouncing(value: boolean);
    set blur(value: boolean);
    get blur(): boolean | undefined;
    get distanceAttenuation(): boolean | undefined;
    set distanceAttenuation(value: boolean);
    get fresnel(): boolean | undefined;
    set fresnel(value: boolean);
    get infiniteThick(): boolean | undefined;
    set infiniteThick(value: boolean);
    set beautyRenderTarget(value: WebGLRenderTarget);
    get beautyRenderTarget(): WebGLRenderTarget | undefined;
    set prevRenderTarget(value: WebGLRenderTarget);
    get prevRenderTarget(): WebGLRenderTarget | undefined;
    set normalRenderTarget(value: WebGLRenderTarget);
    get normalRenderTarget(): WebGLRenderTarget | undefined;
    set metalnessRenderTarget(value: WebGLRenderTarget);
    get metalnessRenderTarget(): WebGLRenderTarget | undefined;
    set ssrRenderTarget(value: WebGLRenderTarget);
    get ssrRenderTarget(): WebGLRenderTarget | undefined;
    set blurRenderTarget(value: WebGLRenderTarget);
    get blurRenderTarget(): WebGLRenderTarget | undefined;
    set blurRenderTarget2(value: WebGLRenderTarget);
    get blurRenderTarget2(): WebGLRenderTarget | undefined;
    set ssrMaterial(value: ShaderMaterial);
    get ssrMaterial(): ShaderMaterial | undefined;
    set normalMaterial(value: MeshNormalMaterial);
    get normalMaterial(): MeshNormalMaterial | undefined;
    set metalnessOnMaterial(value: MeshBasicMaterial);
    get metalnessOnMaterial(): MeshBasicMaterial | undefined;
    set metalnessOffMaterial(value: MeshBasicMaterial);
    get metalnessOffMaterial(): MeshBasicMaterial | undefined;
    set blurMaterial(value: ShaderMaterial);
    get blurMaterial(): ShaderMaterial | undefined;
    set blurMaterial2(value: ShaderMaterial);
    get blurMaterial2(): ShaderMaterial | undefined;
    set depthRenderMaterial(value: ShaderMaterial);
    get depthRenderMaterial(): ShaderMaterial | undefined;
    set copyMaterial(value: ShaderMaterial);
    get copyMaterial(): ShaderMaterial | undefined;
    set fsQuad(value: FullScreenQuad);
    get fsQuad(): FullScreenQuad | undefined;
    set originalClearColor(value: Color | [
        ...args: [color: ColorRepresentation] | [r: number, g: number, b: number]
    ]);
    get originalClearColor(): Color | undefined;
    static readonly OUTPUT: {
        Default: 0;
        SSR: 1;
        Beauty: 3;
        Depth: 4;
        Normal: 5;
        Metalness: 7;
    };
    set dispose(value: () => void);
    get dispose(): (() => void) | undefined;
    set renderPass(value: (renderer: WebGLRenderer, passMaterial: Material, renderTarget: WebGLRenderTarget, clearColor: ColorRepresentation, clearAlpha: ColorRepresentation) => void);
    get renderPass(): ((renderer: WebGLRenderer, passMaterial: Material, renderTarget: WebGLRenderTarget, clearColor: ColorRepresentation, clearAlpha: ColorRepresentation) => void) | undefined;
    set renderOverride(value: (renderer: WebGLRenderer, passMaterial: Material, renderTarget: WebGLRenderTarget, clearColor: ColorRepresentation, clearAlpha: ColorRepresentation) => void);
    get renderOverride(): ((renderer: WebGLRenderer, passMaterial: Material, renderTarget: WebGLRenderTarget, clearColor: ColorRepresentation, clearAlpha: ColorRepresentation) => void) | undefined;
    set renderMetalness(value: (renderer: WebGLRenderer, passMaterial: Material, renderTarget: WebGLRenderTarget, clearColor: ColorRepresentation, clearAlpha: ColorRepresentation) => void);
    get renderMetalness(): ((renderer: WebGLRenderer, passMaterial: Material, renderTarget: WebGLRenderTarget, clearColor: ColorRepresentation, clearAlpha: ColorRepresentation) => void) | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThSSRPass<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThSSRPass<any, any>, "th-sSRPass", never, { "width": { "alias": "width"; "required": false; }; "height": { "alias": "height"; "required": false; }; "clear": { "alias": "clear"; "required": false; }; "renderer": { "alias": "renderer"; "required": false; }; "scene": { "alias": "scene"; "required": false; }; "camera": { "alias": "camera"; "required": false; }; "groundReflector": { "alias": "groundReflector"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "output": { "alias": "output"; "required": false; }; "maxDistance": { "alias": "maxDistance"; "required": false; }; "thickness": { "alias": "thickness"; "required": false; }; "tempColor": { "alias": "tempColor"; "required": false; }; "selects": { "alias": "selects"; "required": false; }; "selective": { "alias": "selective"; "required": false; }; "bouncing": { "alias": "bouncing"; "required": false; }; "blur": { "alias": "blur"; "required": false; }; "distanceAttenuation": { "alias": "distanceAttenuation"; "required": false; }; "fresnel": { "alias": "fresnel"; "required": false; }; "infiniteThick": { "alias": "infiniteThick"; "required": false; }; "beautyRenderTarget": { "alias": "beautyRenderTarget"; "required": false; }; "prevRenderTarget": { "alias": "prevRenderTarget"; "required": false; }; "normalRenderTarget": { "alias": "normalRenderTarget"; "required": false; }; "metalnessRenderTarget": { "alias": "metalnessRenderTarget"; "required": false; }; "ssrRenderTarget": { "alias": "ssrRenderTarget"; "required": false; }; "blurRenderTarget": { "alias": "blurRenderTarget"; "required": false; }; "blurRenderTarget2": { "alias": "blurRenderTarget2"; "required": false; }; "ssrMaterial": { "alias": "ssrMaterial"; "required": false; }; "normalMaterial": { "alias": "normalMaterial"; "required": false; }; "metalnessOnMaterial": { "alias": "metalnessOnMaterial"; "required": false; }; "metalnessOffMaterial": { "alias": "metalnessOffMaterial"; "required": false; }; "blurMaterial": { "alias": "blurMaterial"; "required": false; }; "blurMaterial2": { "alias": "blurMaterial2"; "required": false; }; "depthRenderMaterial": { "alias": "depthRenderMaterial"; "required": false; }; "copyMaterial": { "alias": "copyMaterial"; "required": false; }; "fsQuad": { "alias": "fsQuad"; "required": false; }; "originalClearColor": { "alias": "originalClearColor"; "required": false; }; "dispose": { "alias": "dispose"; "required": false; }; "renderPass": { "alias": "renderPass"; "required": false; }; "renderOverride": { "alias": "renderOverride"; "required": false; }; "renderMetalness": { "alias": "renderMetalness"; "required": false; }; }, {}, never, ["*"], false, never>;
}
