import { Type } from '@angular/core';
import { Blending, BlendingDstFactor, BlendingEquation, BlendingSrcFactor, Color, ColorRepresentation, DepthModes, Material, Plane, Side, StencilFunc, StencilOp } from 'three';
import { ThMaterialBase } from '../ThMaterialBase';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export declare class ThMaterial<T extends Material = Material, TARGS = []> extends ThMaterialBase<T, TARGS> {
    getType(): Type<Material>;
    get isMaterial(): true | undefined;
    set alphaHash(value: boolean);
    get alphaHash(): boolean | undefined;
    set alphaToCoverage(value: boolean);
    get alphaToCoverage(): boolean | undefined;
    set blendAlpha(value: number);
    get blendAlpha(): number | undefined;
    set blendColor(value: Color | [
        ...args: [color: ColorRepresentation] | [r: number, g: number, b: number]
    ]);
    get blendColor(): Color | undefined;
    set blendDst(value: BlendingDstFactor);
    get blendDst(): BlendingDstFactor | undefined;
    set blendDstAlpha(value: number | null);
    get blendDstAlpha(): (number | null) | undefined;
    set blendEquation(value: BlendingEquation);
    get blendEquation(): BlendingEquation | undefined;
    set blendEquationAlpha(value: number | null);
    get blendEquationAlpha(): (number | null) | undefined;
    set blending(value: Blending);
    get blending(): Blending | undefined;
    set blendSrc(value: BlendingSrcFactor | BlendingDstFactor);
    get blendSrc(): (BlendingSrcFactor | BlendingDstFactor) | undefined;
    set blendSrcAlpha(value: number | null);
    get blendSrcAlpha(): (number | null) | undefined;
    set clipIntersection(value: boolean);
    get clipIntersection(): boolean | undefined;
    set clippingPlanes(value: Plane[] | null);
    get clippingPlanes(): (Plane[] | null) | undefined;
    set clipShadows(value: boolean);
    get clipShadows(): boolean | undefined;
    set colorWrite(value: boolean);
    get colorWrite(): boolean | undefined;
    set defines(value: undefined | {
        [key: string]: any;
    });
    get defines(): (undefined | {
        [key: string]: any;
    }) | undefined;
    set depthFunc(value: DepthModes);
    get depthFunc(): DepthModes | undefined;
    set depthTest(value: boolean);
    get depthTest(): boolean | undefined;
    set depthWrite(value: boolean);
    get depthWrite(): boolean | undefined;
    set id(value: number);
    get id(): number | undefined;
    set stencilWrite(value: boolean);
    get stencilWrite(): boolean | undefined;
    set stencilFunc(value: StencilFunc);
    get stencilFunc(): StencilFunc | undefined;
    set stencilRef(value: number);
    get stencilRef(): number | undefined;
    set stencilWriteMask(value: number);
    get stencilWriteMask(): number | undefined;
    set stencilFuncMask(value: number);
    get stencilFuncMask(): number | undefined;
    set stencilFail(value: StencilOp);
    get stencilFail(): StencilOp | undefined;
    set stencilZFail(value: StencilOp);
    get stencilZFail(): StencilOp | undefined;
    set stencilZPass(value: StencilOp);
    get stencilZPass(): StencilOp | undefined;
    set name(value: string);
    get name(): string | undefined;
    set opacity(value: number);
    get opacity(): number | undefined;
    set polygonOffset(value: boolean);
    get polygonOffset(): boolean | undefined;
    set polygonOffsetFactor(value: number);
    get polygonOffsetFactor(): number | undefined;
    set polygonOffsetUnits(value: number);
    get polygonOffsetUnits(): number | undefined;
    set precision(value: 'highp' | 'mediump' | 'lowp' | null);
    get precision(): ('highp' | 'mediump' | 'lowp' | null) | undefined;
    set premultipliedAlpha(value: boolean);
    get premultipliedAlpha(): boolean | undefined;
    set forceSinglePass(value: boolean);
    get forceSinglePass(): boolean | undefined;
    set dithering(value: boolean);
    get dithering(): boolean | undefined;
    set side(value: Side);
    get side(): Side | undefined;
    set shadowSide(value: Side | null);
    get shadowSide(): (Side | null) | undefined;
    set toneMapped(value: boolean);
    get toneMapped(): boolean | undefined;
    set transparent(value: boolean);
    get transparent(): boolean | undefined;
    set type(value: string);
    get type(): string | undefined;
    set uuid(value: string);
    get uuid(): string | undefined;
    set vertexColors(value: boolean);
    get vertexColors(): boolean | undefined;
    set visible(value: boolean);
    get visible(): boolean | undefined;
    set userData(value: Record<string, any>);
    get userData(): Record<string, any> | undefined;
    set version(value: number);
    get version(): number | undefined;
    get alphaTest(): number | undefined;
    set alphaTest(value: number);
    set needsUpdate(value: boolean);
    constructor(hostObject: ThObject3D);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThMaterial<any, any>, [{ skipSelf: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThMaterial<any, any>, "th-material", never, { "alphaHash": { "alias": "alphaHash"; "required": false; }; "alphaToCoverage": { "alias": "alphaToCoverage"; "required": false; }; "blendAlpha": { "alias": "blendAlpha"; "required": false; }; "blendColor": { "alias": "blendColor"; "required": false; }; "blendDst": { "alias": "blendDst"; "required": false; }; "blendDstAlpha": { "alias": "blendDstAlpha"; "required": false; }; "blendEquation": { "alias": "blendEquation"; "required": false; }; "blendEquationAlpha": { "alias": "blendEquationAlpha"; "required": false; }; "blending": { "alias": "blending"; "required": false; }; "blendSrc": { "alias": "blendSrc"; "required": false; }; "blendSrcAlpha": { "alias": "blendSrcAlpha"; "required": false; }; "clipIntersection": { "alias": "clipIntersection"; "required": false; }; "clippingPlanes": { "alias": "clippingPlanes"; "required": false; }; "clipShadows": { "alias": "clipShadows"; "required": false; }; "colorWrite": { "alias": "colorWrite"; "required": false; }; "defines": { "alias": "defines"; "required": false; }; "depthFunc": { "alias": "depthFunc"; "required": false; }; "depthTest": { "alias": "depthTest"; "required": false; }; "depthWrite": { "alias": "depthWrite"; "required": false; }; "id": { "alias": "id"; "required": false; }; "stencilWrite": { "alias": "stencilWrite"; "required": false; }; "stencilFunc": { "alias": "stencilFunc"; "required": false; }; "stencilRef": { "alias": "stencilRef"; "required": false; }; "stencilWriteMask": { "alias": "stencilWriteMask"; "required": false; }; "stencilFuncMask": { "alias": "stencilFuncMask"; "required": false; }; "stencilFail": { "alias": "stencilFail"; "required": false; }; "stencilZFail": { "alias": "stencilZFail"; "required": false; }; "stencilZPass": { "alias": "stencilZPass"; "required": false; }; "name": { "alias": "name"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "polygonOffset": { "alias": "polygonOffset"; "required": false; }; "polygonOffsetFactor": { "alias": "polygonOffsetFactor"; "required": false; }; "polygonOffsetUnits": { "alias": "polygonOffsetUnits"; "required": false; }; "precision": { "alias": "precision"; "required": false; }; "premultipliedAlpha": { "alias": "premultipliedAlpha"; "required": false; }; "forceSinglePass": { "alias": "forceSinglePass"; "required": false; }; "dithering": { "alias": "dithering"; "required": false; }; "side": { "alias": "side"; "required": false; }; "shadowSide": { "alias": "shadowSide"; "required": false; }; "toneMapped": { "alias": "toneMapped"; "required": false; }; "transparent": { "alias": "transparent"; "required": false; }; "type": { "alias": "type"; "required": false; }; "uuid": { "alias": "uuid"; "required": false; }; "vertexColors": { "alias": "vertexColors"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "userData": { "alias": "userData"; "required": false; }; "version": { "alias": "version"; "required": false; }; "alphaTest": { "alias": "alphaTest"; "required": false; }; "needsUpdate": { "alias": "needsUpdate"; "required": false; }; }, {}, never, ["*"], false, never>;
}
