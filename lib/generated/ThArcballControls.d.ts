import { Type } from '@angular/core';
import { Camera, Scene, Vector3 } from 'three';
import { ArcballControls } from 'three/examples/jsm/controls/ArcballControls.js';
import { ThControlBase } from '../ThControlBase';
import * as i0 from "@angular/core";
export declare class ThArcballControls<T extends ArcballControls = ArcballControls, TARGS = [camera: Camera, domElement: HTMLElement, scene?: Scene | null]> extends ThControlBase<T, TARGS> {
    getType(): Type<ArcballControls>;
    set camera(value: Camera | null);
    get camera(): (Camera | null) | undefined;
    set domElement(value: HTMLElement);
    get domElement(): HTMLElement | undefined;
    set scene(value: Scene | null | undefined);
    get scene(): (Scene | null | undefined) | undefined;
    set focusAnimationTime(value: number);
    get focusAnimationTime(): number | undefined;
    set enabled(value: boolean);
    get enabled(): boolean | undefined;
    set enablePan(value: boolean);
    get enablePan(): boolean | undefined;
    set enableRotate(value: boolean);
    get enableRotate(): boolean | undefined;
    set enableZoom(value: boolean);
    get enableZoom(): boolean | undefined;
    set enableGizmos(value: boolean);
    get enableGizmos(): boolean | undefined;
    set adjustNearFar(value: boolean);
    get adjustNearFar(): boolean | undefined;
    set scaleFactor(value: number);
    get scaleFactor(): number | undefined;
    set dampingFactor(value: number);
    get dampingFactor(): number | undefined;
    set wMax(value: number);
    get wMax(): number | undefined;
    set enableAnimations(value: boolean);
    get enableAnimations(): boolean | undefined;
    set enableGrid(value: boolean);
    get enableGrid(): boolean | undefined;
    set cursorZoom(value: boolean);
    get cursorZoom(): boolean | undefined;
    set minFov(value: number);
    get minFov(): number | undefined;
    set maxFov(value: number);
    get maxFov(): number | undefined;
    set minDistance(value: number);
    get minDistance(): number | undefined;
    set maxDistance(value: number);
    get maxDistance(): number | undefined;
    set minZoom(value: number);
    get minZoom(): number | undefined;
    set maxZoom(value: number);
    get maxZoom(): number | undefined;
    set target(value: Vector3 | [x: number, y: number, z: number]);
    get target(): Vector3 | undefined;
    set radiusFactor(value: number);
    get radiusFactor(): number | undefined;
    set rotateSpeed(value: number);
    get rotateSpeed(): number | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThArcballControls<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThArcballControls<any, any>, "th-arcballControls", never, { "camera": { "alias": "camera"; "required": false; }; "domElement": { "alias": "domElement"; "required": false; }; "scene": { "alias": "scene"; "required": false; }; "focusAnimationTime": { "alias": "focusAnimationTime"; "required": false; }; "enabled": { "alias": "enabled"; "required": false; }; "enablePan": { "alias": "enablePan"; "required": false; }; "enableRotate": { "alias": "enableRotate"; "required": false; }; "enableZoom": { "alias": "enableZoom"; "required": false; }; "enableGizmos": { "alias": "enableGizmos"; "required": false; }; "adjustNearFar": { "alias": "adjustNearFar"; "required": false; }; "scaleFactor": { "alias": "scaleFactor"; "required": false; }; "dampingFactor": { "alias": "dampingFactor"; "required": false; }; "wMax": { "alias": "wMax"; "required": false; }; "enableAnimations": { "alias": "enableAnimations"; "required": false; }; "enableGrid": { "alias": "enableGrid"; "required": false; }; "cursorZoom": { "alias": "cursorZoom"; "required": false; }; "minFov": { "alias": "minFov"; "required": false; }; "maxFov": { "alias": "maxFov"; "required": false; }; "minDistance": { "alias": "minDistance"; "required": false; }; "maxDistance": { "alias": "maxDistance"; "required": false; }; "minZoom": { "alias": "minZoom"; "required": false; }; "maxZoom": { "alias": "maxZoom"; "required": false; }; "target": { "alias": "target"; "required": false; }; "radiusFactor": { "alias": "radiusFactor"; "required": false; }; "rotateSpeed": { "alias": "rotateSpeed"; "required": false; }; }, {}, never, ["*"], false, never>;
}
